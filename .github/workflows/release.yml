name: IBM i build new release
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  ssh_command: ssh ${{ secrets.IBMI_BUILD_USRPRF }}@${{ secrets.IBMI_BUILD_SYS }}
  scp_dist_command: scp ${{ secrets.IBMI_BUILD_USRPRF }}@${{ secrets.IBMI_BUILD_SYS }}:/home/${{ secrets.IBMI_BUILD_USRPRF }}/build/${{ github.sha }}/dist.savf .
  remote_build_dir: /home/${{ secrets.IBMI_BUILD_USRPRF }}/build/${{ github.sha }}
  rsync_command: rsync -a --exclude='.*' --exclude='runners' --rsync-path=/QOpenSys/pkgs/bin/rsync ./ ${{ secrets.IBMI_BUILD_USRPRF }}@${{ secrets.IBMI_BUILD_SYS }}:/home/${{ secrets.IBMI_BUILD_USRPRF }}/build/${{ github.sha }}/

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Install private key
      run: |
        mkdir -p ~/.ssh
        chmod 0755 ~
        chmod 0700 ~/.ssh
        echo  "${{ secrets.IBMI_BUILD_PVTKEY }}" > ~/.ssh/id_rsa
        chmod 0600 ~/.ssh/id_rsa
    - name: Disable strict host key checking
      run: |
        echo "Host *" > ~/.ssh/config
        echo "  StrictHostKeyChecking no" >> ~/.ssh/config
    - name: Create build sandbox
      run: $ssh_command "mkdir -p $remote_build_dir"
    - name: Populate build sandbox
      run: $rsync_command
    - name: Get short SHA ID
      run: |
        echo "short_sha=$(echo ${{ github.sha }} | head -c 7)" >> $GITHUB_ENV
        cat $GITHUB_ENV
    - name: Get library name
      run: |
        echo "build_library=GH{{env.short_sha}}" >> $GITHUB_ENV
        cat $GITHUB_ENV
    - name: Perform remote build
      run: $ssh_command "cd $remote_build_dir && /QOpenSys/pkgs/bin/python3.9 ./configure --library=$build_library && /QOpenSys/pkgs/bin/make clean dist"
    - name: Retrieve artifact
      run: $scp_dist_command
    - name: Cleanup remote build lib
      if: always()
      run: $ssh_command "system 'dltlib $build_library'"
    - name: Cleanup remote build dir
      if: always()
      run: $ssh_command "rm -fr $remote_build_dir"
    - name: Create the release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload *SAVF to release
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./dist.savf
        asset_name: dist.savf
        asset_content_type: application/zip