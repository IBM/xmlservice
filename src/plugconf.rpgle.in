     H NOMAIN
     H AlwNull(*UsrCtl)
     H BNDDIR('QC2LE')

      *****************************************************
      * Copyright (c) 2010, IBM Corporation
      * All rights reserved.
      *
      * Redistribution and use in source and binary forms,
      * with or without modification, are permitted provided
      * that the following conditions are met:
      * - Redistributions of source code must retain
      *   the above copyright notice, this list of conditions
      *   and the following disclaimer.
      * - Redistributions in binary form must reproduce the
      *   above copyright notice, this list of conditions
      *   and the following disclaimer in the documentation
      *   and/or other materials provided with the distribution.
      * - Neither the name of the IBM Corporation nor the names
      *   of its contributors may be used to endorse or promote
      *   products derived from this software without specific
      *   prior written permission.
      *
      * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
      * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
      * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
      * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
      * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
      * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
      * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
      * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
      * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
      * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
      * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
      * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
      * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
      * POSSIBILITY OF SUCH DAMAGE.
      *****************************************************

      *****************************************************
      * includes
      *****************************************************
      /copy plugconf_h
      /copy plugipc_h
      /copy plugsig_h
      /copy plugerr_h
      /copy plugsql_h
      /copy plugile_h
      /copy plugperf_h

      *****************************************************
      *   PLUGNONEOK - *ON/*OFF allow *NONE (REST XMLCGI)
      *****************************************************
     D PLUGNONEOK      S              1N   inz(*OFF)

      *****************************************************
      * ---change if alternate library---
      *****************************************************
      * RPG CLI call stored procedures (xmlcgi)
     D PLUGCALLSP      c                   const('CALL @LIBRARY@.')
      * spawn config PLUGSPNLIB/PLUGSPNPGM (plugipc)
     D PLUGSPNPGM      c                   const('XMLSERVICE.PGM')
     D PLUGSPNDIR      c                   const('/QSYS.LIB/@LIBRARY@.LIB/')
      * sbmjob config (plugipc)
     D PLUGSBMLIB      c                   const('@LIBRARY@')
     D PLUGSBMPGM      c                   const('XMLSERVICE')
      * was QGPL/QDFTJOBD
     D PLUGJOBLIB      c                   const('QSYS')
     D PLUGJOBD        c                   const('QSRVJOB')
     D PLUGJOBNAM      c                   const('XTOOLKIT')
     D PLUGJOBASP      c                   const(*BLANKS)

      *****************************************************
      * --- idle time out seconds defaults (Luca IDLE_TIMEOUT) ---
      *****************************************************
      * idle time out seconds client (stored proc)
     D PLUGIDLETIMECLIENT...
     D                 C                   const(60)
     D PLUGIDLEACTCLIENT...
     D                 S              1A   inz(SIG_ACTION_BUSY)
      * idle time out seconds server (XMLSERVICE)
     D PLUGIDLETIMESERVER...
     D                 C                   const(0)
     D PLUGIDLEACTSERVER...
     D                 S              1A   inz(SIG_ACTION_KILL)
      * idle time out seconds call user pgm (XMLSERVICE)
      * default 0 means wait forever (user never makes error)
     D PLUGIDLETIMECALLCLIENT...
     D                 C                   const(0)
     D PLUGIDLEACTCALLCLIENT...
     D                 S              1A   inz(SIG_ACTION_KILL)
     D PLUGIDLETIMECALLSERVER...
     D                 C                   const(0)
     D PLUGIDLEACTCALLSERVER...
     D                 S              1A   inz(SIG_ACTION_KILL)

      *****************************************************
      * ---change if alternate library/table---
      *****************************************************
     D PLUGLOGLIB      c                   const('XMLSERVLOG')
     D PLUGLOGTAB      c                   const('LOG')
     D PLUGLOGMOR      c                   const('DUMP')

      *****************************************************
      * RPG customer logging
      *****************************************************
     P confLogLib      B                   export
     D confLogLib      PI            10A
      /free
       return PLUGLOGLIB;
      /end-free
     P                 E

     P confLogTab      B                   export
     D confLogTab      PI            10A
      /free
       return PLUGLOGTAB;
      /end-free
     P                 E

     P confLogMore     B                   export
     D confLogMore     PI            10A
      /free
       return PLUGLOGMOR;
      /end-free
     P                 E

     P confLogPop      B                   export
     D confLogPop      PI
     D   text                        64A   value
      * vars
     D pos             s             10i 0 inz(0)
      /free
       // ignore watch perf entries (too many)
       pos = %scan('W_':text);
       if pos > 0;
         return;
       endif;
       log_add(text);
      /end-free
     P                 E

     P confDumpPop     B                   export
     D confDumpPop     PI
     D   text                     65000A   value
      * vars
     D pos             s             10i 0 inz(0)
      /free
       log_dump(text);
      /end-free
     P                 E

      *****************************************************
      * RPG customer default header
      *****************************************************
     P confHeader      B                   export
     D confHeader      PI          2048A
      /free
       return '<?xml version=''1.0'' encoding=''ISO-8859-1''?>';
      /end-free
     P                 E

      *****************************************************
      * RPG auth (xmlcgi)
      *****************************************************
     P confNoneOk      B                   export
     D confNoneOk      PI             1N
      /free
       return PLUGNONEOK;
      /end-free
     P                 E


      *****************************************************
      * RPG CLI call stored procedures (xmlcgi)
      *****************************************************
     P confCALLSP      B                   export
     D confCALLSP      PI           128A
      /free
       return PLUGCALLSP;
      /end-free
     P                 E

      *****************************************************
      * spawn config PLUGSPNLIB/PLUGSPNPGM (plugipc)
      *****************************************************
     P confSPNDIR      B                   export
     D confSPNDIR      PI           128A
      /free
       return PLUGSPNDIR;
      /end-free
     P                 E

     P confSPNPGM      B                   export
     D confSPNPGM      PI           128A
      /free
       return PLUGSPNPGM;
      /end-free
     P                 E

      *****************************************************
      * sbmjob config (plugipc)
      * SBMJOB CMD(CALL PGM(@LIBRARY@/XMLSERVICE)
      *   PARM('/tmp/ranger')) JOBD(QSYS/QSRVJOB)
      *****************************************************
     P confSBMLIB      B                   export
     D confSBMLIB      PI            10A
      /free
       return PLUGSBMLIB;
      /end-free
     P                 E

     P confSBMPGM      B                   export
     D confSBMPGM      PI            10A
      /free
       return PLUGSBMPGM;
      /end-free
     P                 E

     P confJOBLIB      B                   export
     D confJOBLIB      PI            10A
      /free
       return PLUGJOBLIB;
      /end-free
     P                 E

     P confJOBD        B                   export
     D confJOBD        PI            10A
      /free
       return PLUGJOBD;
      /end-free
     P                 E


     P confJOBNAM      B                   export
     D confJOBNAM      PI            10A
      /free
       return PLUGJOBNAM;
      /end-free
     P                 E

     P confJOBASP      B                   export
     D confJOBASP      PI            10A
      /free
       return PLUGJOBASP;
      /end-free
     P                 E

      *****************************************************
      * custom client side security  (xmlcgi)
      * - will XMLCGI accept client content?
      *****************************************************
     P confCGI         B                   export
     D confCGI         PI             1N
     D  mDB2                         10A   value
     D  mUID                         10A   value
     D  mPWD                        128A   value
     D  mIPC                       1024A   value
     D  mCtl                       1024A   value
     D  mIClob                         *   value
     D  mzIClob                      10i 0 value
     D  mOClob                         *   value
     D  mzOClob                      10i 0 value
      /free
       // *NONE not allowed
       if confNoneOk() = *OFF and mUID = '*NONE';
         errsSevere(XMLCGI_ERROR_NONE_INVALID:mUID);
         return *OFF;
       endif;
       return *ON;
      /end-free
     P                 E

      *****************************************************
      * custom client side security  (plugrun)
      * - will XMLSERVICE accept client content?
      *****************************************************
     P confClient      B                   export
     D confClient      PI             1N
     D   pIPCSP                    1024A   value
     D   pCtlSP                    1024A   value
     D   pIClob                        *   value
     D   szIClob                     10i 0 value
     D   pOClob                        *   value
     D   szOClob                     10i 0 value
      /free
       return *ON;
      /end-free
     P                 E

      *****************************************************
      * custom server side security  (plugrun)
      * - will XMLSERVICE start?
      *****************************************************
     P confStart       B                   export
     D confStart       PI             1N
     D   pIPCSP                    1024A   value
      /free
       return *ON;
      /end-free
     P                 E

      *****************************************************
      * custom server side security  (plugrun)
      * - will XMLSERVICE accept client content?
      *****************************************************
     P confAccept      B                   export
     D confAccept      PI             1N
     D   runMemP                       *   value
      * vars
     D runMem          S               *   inz(*NULL)
     D ipcCtl          DS                  likeds(ipcRec_t) based(runMem)
      /free
       runMem = runMemP;
       return *ON;
      /end-free
     P                 E

      *****************************************************
      * custom server side output  (plugrun)
      * - custom "XML" output to caller ok?
      *****************************************************
     P confSrvOut      B                   export
     D confSrvOut      PI             1N
     D   runGood                      1N   value
     D   runMemP                       *   value
      * vars
     D runOk           s              1N   inz(*ON)
     D runMem          S               *   inz(*NULL)
     D ipcCtl          DS                  likeds(ipcRec_t) based(runMem)
      /free
       runOk = runGood;
       runMem = runMemP;
       return runOk;
      /end-free
     P                 E

      *****************************************************
      * custom client side output  (plugrun)
      * - custom "XML" output to caller ok?
      *****************************************************
     P confCltOut      B                   export
     D confCltOut      PI             1N
     D   runGood                      1N   value
     D   pOClob                        *   value
     D   szOClob                     10i 0 value
      * vars
     D runOk           s              1N   inz(*ON)
      /free
       runOk = runGood;
       return runOk;
      /end-free
     P                 E


      *****************************************************
      * custom client diagnostic info
      * - <diag info='conf'>
      *****************************************************
     P confDiag        B                   export
     D confDiag        PI             1N
     D   jobName                     10A   value
     D   jobUserID                   10A   value
     D   jobNbr                       6A   value
     D   anyData                  60000A
      /free
       return *ON;
      /end-free
     P                 E

      *****************************************************
      *****************************************************
      *****************************************************
      * custom client/server idle time out seconds
      * (Luca IDLE_TIMEOUT)
      *****************************************************
      *****************************************************
      *****************************************************

      *****************************************************
      * custom client idle time out action
      *****************************************************
     P confAction      B                   export
     D confAction      PI             1A
     D   timerType                    1A   value
      * vars
     D alarmAct        s              1A   inz(*BLANKS)
      /free
       select;
       when timerType = SIG_TIMEOUT_CLIENT;
         alarmAct = PLUGIDLEACTCLIENT;
       when timerType = SIG_TIMEOUT_SERVER;
         alarmAct = PLUGIDLEACTSERVER;
       when timerType = SIG_TIMEOUT_CALL_CLIENT;
         alarmAct = PLUGIDLEACTCALLCLIENT;
       when timerType = SIG_TIMEOUT_CALL_SERVER;
         alarmAct = PLUGIDLEACTCALLSERVER;
       other;
         alarmAct = *BLANKS;
       endsl;
       return alarmAct;
      /end-free
     P                 E

      *****************************************************
      * custom client idle time out seconds
      *****************************************************
     P confSeconds     B                   export
     D confSeconds     PI            10i 0
     D   timerType                    1A   value
      * vars
     D alarmSec        s             10i 0 inz(-1)
      /free
       select;
       when timerType = SIG_TIMEOUT_CLIENT;
         alarmSec = PLUGIDLETIMECLIENT;
       when timerType = SIG_TIMEOUT_SERVER;
         alarmSec = PLUGIDLETIMESERVER;
       when timerType = SIG_TIMEOUT_CALL_CLIENT;
         alarmSec = PLUGIDLETIMECALLCLIENT;
       when timerType = SIG_TIMEOUT_CALL_SERVER;
         alarmSec = PLUGIDLETIMECALLSERVER;
       other;
         alarmSec = -1;
       endsl;
       return alarmSec;
      /end-free
     P                 E

      *****************************************************
      * custom timer popped (time out occurred)
      *****************************************************
     P confTimePop     B                   export
     D confTimePop     PI
     D   signo                       10I 0 value
     D   timerType                    1A   value
     D   timeAction                   1A   value
     D   timeSeconds                 10i 0 value
      /free
       select;
       when timerType = SIG_TIMEOUT_CLIENT;
         if timeAction = SIG_ACTION_BUSY;
           ipcEndJobBusy();
         elseif timeAction = SIG_ACTION_KILL;
           ipcEndJobImmed();
         elseif timeAction = SIG_ACTION_USER;
           ipcEndJobImmed();
         endif;
       when timerType = SIG_TIMEOUT_SERVER;
         if timeAction = SIG_ACTION_BUSY;
           ipcEndJobBusy();
         elseif timeAction = SIG_ACTION_KILL;
           ipcEndJobImmed();
         elseif timeAction = SIG_ACTION_USER;
           ipcEndJobImmed();
         endif;
       when timerType = SIG_TIMEOUT_CALL_CLIENT;
         if timeAction = SIG_ACTION_BUSY;
           ipcEndJobBusy();
         elseif timeAction = SIG_ACTION_KILL;
           ipcEndJobImmed();
         elseif timeAction = SIG_ACTION_USER;
           ipcEndJobImmed();
         endif;
       when timerType = SIG_TIMEOUT_CALL_SERVER;
         if timeAction = SIG_ACTION_BUSY;
           ipcEndJobBusy();
         elseif timeAction = SIG_ACTION_KILL;
           ipcEndJobImmed();
         elseif timeAction = SIG_ACTION_USER;
           ipcEndJobImmed();
         endif;
       other;
       endsl;
      /end-free
     P                 E

